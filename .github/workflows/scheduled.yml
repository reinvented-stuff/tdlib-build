---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Scheduled

on:
  schedule:
    - cron: '35 15 * * *'

jobs:

  upload_to_artifactory:
    name: Check for new TDLib versions
    runs-on: ubuntu-latest

    steps:

      - name: Send notification on start
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Repository: ${GITHUB_REPOSITORY}
            Workflow: ${GITHUB_WORKFLOW}
            Scheduled run happened
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0


      - name: Check out tdlib repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: tdlib/td
          path: td


      - name: Retreive last tdlib version from commit history
        id: get_last_version
        shell: bash
        run: >-
          LAST_VERSION=$(
          git -C td
          log
          --pretty="format:%s"
          --grep="Update version to" |
          cut -d " " -f 4 |
          head -1
          )

          echo "last_version=${LAST_VERSION}" >> "${GITHUB_OUTPUT}"


      - name: Match last tdlib version with .version contents
        id: match_versions
        shell: bash
        run: >-
          PLANNED_VERSION="$( cat .version )"

          if [[ "${{ steps.get_last_version.outputs.last_version }}" =~ "${PLANNED_VERSION}" ]]; then
            echo "match=true" >> "${GITHUB_OUTPUT}"
            echo "caption=No new version found" >> "${GITHUB_OUTPUT}"
          else
            echo "match=false" >> "${GITHUB_OUTPUT}"
            echo "caption=Scheduled run found new version: ${{ steps.get_last_version.outputs.last_version }}" >> "${GITHUB_OUTPUT}"
          fi


      - name: Send notification with version lookup results
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Repository: ${GITHUB_REPOSITORY}
            Workflow: ${GITHUB_WORKFLOW}
            ${{ steps.match_versions.outputs.caption }}
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Terraform show
        id: terraform_show
        shell: bash
        working-directory: infra/terraform
        continue-on-error: true
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: >-
          terraform show -json |
          jq -r '.values.outputs."instance-details".value[][] | .name + "\n" + .ipv4 + "\n" + .ipv6 + "\n"' >
          "outputs.json"

          cat <<EOF >> "${GITHUB_OUTPUT}"
          instances<<EOF2
          $( cat outputs.json  )
          EOF2
          EOF


      - name: Send notification with terraform outputs
        uses: rest-gateway/notification-action@1.0.9
        if: always()
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/})
            <b>URL:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>

            <b>Instances:</b>
            ${{ steps.terraform_show.outputs.instances }}

            <b>Outcome:</b>
            terraform show: ${{ steps.terraform_show.outcome }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Upload .version file to JFrog Artifactory (to keep the account alive)
        id: upload_to_artifactory
        shell: bash
        run: >-
          curl
          -o upload_to_artifactory_result.json
          -X PUT
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -T ".version"
          "${{ secrets.ARTIFACTORY_REPO_URL }}/.version"


...
