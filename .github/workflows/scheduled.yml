---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Scheduled

on:
  schedule:
    - cron: '35 15 * * *'
  workflow_dispatch:
    inputs:
      prepare_changes:
        required: true
        default: false
        type: boolean
        description: Create feature branch

jobs:

  upload_to_artifactory:
    name: Check for new TDLib versions
    runs-on: ubuntu-latest

    steps:

      - name: Send notification on start
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Repository: ${GITHUB_REPOSITORY}
            Workflow: ${GITHUB_WORKFLOW}
            Scheduled run happened
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Check out code
        id: checkout_code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0


      - name: Check out tdlib repo
        id: checkout_tdlib
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: tdlib/td
          path: td


      - name: Retreive last tdlib version from commit history
        id: get_last_version
        shell: bash
        run: >-
          LAST_VERSION=$(
          git -C td
          log
          --pretty="format:%s"
          --grep="Update version to" |
          cut -d " " -f 4 |
          head -1
          )

          echo "last_version=${LAST_VERSION%*.}" >> "${GITHUB_OUTPUT}"


      - name: Match last tdlib version with .version contents
        id: match_versions
        shell: bash
        run: >-
          PLANNED_VERSION="$( cat .version )"

          if [[ "${{ steps.get_last_version.outputs.last_version }}" =~ "${PLANNED_VERSION}" ]]; then
            echo "match=true" >> "${GITHUB_OUTPUT}"
            echo "caption=No new version found" >> "${GITHUB_OUTPUT}"
          else
            echo "match=false" >> "${GITHUB_OUTPUT}"
            echo "caption=Scheduled run found new version: ${{ steps.get_last_version.outputs.last_version }}" >> "${GITHUB_OUTPUT}"
          fi


      - name: Send notification with version lookup results
        uses: rest-gateway/notification-action@master
        with:
          message: |
            Repository: ${GITHUB_REPOSITORY}
            Workflow: ${GITHUB_WORKFLOW}
            ${{ steps.match_versions.outputs.caption }}
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Create a branch with a change for the found version
        id: create_new_version_branch
        # if: steps.match_versions.outputs.match == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |

          echo "steps.match_versions.outputs.match='${{ steps.match_versions.outputs.match }}'"
          echo "github.event.inputs.prepare_changes='${{ github.event.inputs.prepare_changes }}'"

          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions@local'

          [[ -f .version ]] || { echo "Error: no .version file found"; exit 2; }

          git checkout -b build_${{ steps.get_last_version.outputs.last_version }}
          echo "${{ steps.get_last_version.outputs.last_version }}b" > .version

          git add .version
          git commit -a -m "gh-84 [Change] Automated version bump to ${{ steps.get_last_version.outputs.last_version }}"

          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          git push origin build_${{ steps.get_last_version.outputs.last_version }}

          gh pr create -B master -H build_${{ steps.get_last_version.outputs.last_version }} \
            --title 'gh-84 [Change] Automated version bump to ${{ steps.get_last_version.outputs.last_version }}' \
            --body 'v${{ steps.get_last_version.outputs.last_version }}'

      - name: Setup Terraform
        id: setup_terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.11


      - name: Terraform init
        id: terraform_init
        shell: bash
        working-directory: infra/terraform
        continue-on-error: true
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 0
        run: >-
          export TF_VAR_ansible_ghr_token=$( cat "${{ steps.get_ghr_token.outputs.token_filename }}" )

          terraform init
          -backend-config="endpoint=${{ secrets.S3_ENDPOINT }}"
          -backend-config="access_key=${{ secrets.S3_ACCESS_KEY }}"
          -backend-config="secret_key=${{ secrets.S3_SECRET_KEY }}"


      - name: Terraform show
        id: terraform_show
        shell: bash
        working-directory: infra/terraform
        continue-on-error: true
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: |
          terraform show -json | \
          jq -r '.values.outputs."instance-details".value[][] | .name + "\n" + .ipv4 + "\n" + .ipv6 + "\n"' > \
          "outputs.json"

          cat outputs.json
          cat <<EOF >> "${GITHUB_OUTPUT}"
          instances<<EOF2
          $( cat outputs.json )

          EOF2
          EOF


      - name: Send notification with terraform outputs
        uses: rest-gateway/notification-action@1.0.9
        if: always()
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/})
            <b>URL:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>

            <b>Instances:</b>
            ${{ steps.terraform_show.outputs.instances }}

            <b>Outcome:</b>
            checkout code: ${{ steps.checkout_code.outcome }}
            checkout tdlib: ${{ steps.checkout_tdlib.outcome }}
            get last version: ${{ steps.get_last_version.outcome }}
            match versions: ${{ steps.match_versions.outcome }}
            setup terraform: ${{ steps.setup_terraform.outcome }}
            terraform init: ${{ steps.terraform_init.outcome }}
            terraform plan: ${{ steps.terraform_plan.outcome }}
            terraform apply: ${{ steps.terraform_apply.outcome }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"

...
