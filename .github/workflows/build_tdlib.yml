---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Build TDLib

on:
  push:
    branches:
      - 'build_*'
      - '!master'

jobs:

  notify_started:
    name: Send notification on start
    runs-on: ubuntu-latest

    steps:

      - name: Send notification on start
        uses: rest-gateway/notification-action@master
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/})
            <b>URL:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      planned_version_commit: ${{ steps.get_version_commit.outputs.version_commit }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@master
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


      - name: Check out tdlib repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: tdlib/td
          path: td


      - name: Retreive tdlib commit corresponding to the planned version
        id: get_version_commit
        shell: bash
        run: >-
          VERSION_COMMIT=$(
          git -C td
          log
          --pretty="format:%H"
          --grep="Update version to ${{ steps.validate_new_version.outputs.planned_version }}"
          )

          echo "::set-output name=version_commit::${VERSION_COMMIT}"


      - name: Make sure commit exists for the planned version
        id: check_commit_exists
        shell: bash
        run: >-
          if [[ -z "${{ steps.get_version_commit.outputs.version_commit }}" ]]; then
            
            echo "Couldn't find commit
          for planned version '${{ steps.validate_new_version.outputs.planned_version }}':
          '${{ steps.get_version_commit.outputs.version_commit }}'"
            
            exit 127

          fi

  build_matrix:
    name: Build Multi-platform
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    strategy:
      matrix:
        version: 
          - ${{ needs.validate_new_version.outputs.planned_version }}
        runs-on:

          - os: redhat-8
            label: linux-redhat-8
            arch: amd64

          - os: redhat-7
            label: linux-redhat-7
            arch: amd64

          - os: ubuntu-22.04
            label: linux-ubuntu-22.04
            arch: amd64

          # - os: ubuntu-18.04
          #   label: linux-ubuntu-18.04
          #   arch: amd64

          # - os: macos-12
          #   label: macos12
          #   arch: amd64

          # - os: macos-11
          #   label: macos11
          #   arch: amd64

          # - os: macos-10.15
          #   label: macos10.15
          #   arch: amd64


    runs-on: ${{ matrix.runs-on.os }}

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      PLANNED_VERSION_COMMIT: ${{ needs.validate_new_version.outputs.planned_version_commit }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "tdlib"
      ARTIFACT_BASENAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}"
      ARTIFACT_TARGZ_NAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}.tar.gz"

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Install dependencies
        id: install_dependencies
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/install-dependencies.sh"


      - name: Check out tdlib repo
        id: checkout_tdlib_repo
        shell: bash
        run: |
          mkdir -pv td
          git clone https://github.com/tdlib/td.git td


      - name: Print out directory contents
        id: print_directory_contents
        shell: bash
        run: |
          ls -lAth .


      - name: Build TDLib
        id: build
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/build.sh"


      - name: Compress binaries
        id: compress_binaries
        shell: bash
        run: |
          mkdir -v "${{ env.ARTIFACT_BASENAME }}"
          mv -v td/tdlib "${{ env.ARTIFACT_BASENAME }}/"
          tar -zvcf "${{ env.ARTIFACT_TARGZ_NAME }}" "${{ env.ARTIFACT_BASENAME }}"


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "${{ env.ARTIFACT_TARGZ_NAME }}"
          path: "${{ env.ARTIFACT_TARGZ_NAME }}"
          if-no-files-found: error
          retention-days: 90


      - name: Upload artifact to JFrog Artifactory
        id: upload_to_artifactory
        shell: bash
        run: >-
          curl
          -o upload_to_artifactory_result.json
          -X PUT
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -T "${{ env.ARTIFACT_TARGZ_NAME }}"
          "${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}"


      - name: List artifacts from JFrog Artifactory
        id: list_artifacts
        shell: bash
        run: >-
          curl
          -o list_artifacts_result.json
          -X GET
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -H "Content-Type: text/plain"
          "${{ secrets.ARTIFACTORY_BASEURL }}/api/search/artifact?repos=${{ env.APP_NAME }}&name=${{ matrix.version }}"

          jq -r '.results[].uri' < list_artifacts_result.json


      - name: Send notification on finish
        uses: rest-gateway/notification-action@master
        with:
          message: >-
            <b>Workflow:</b>   ${GITHUB_WORKFLOW}

            <b>Repository:</b> ${GITHUB_REPOSITORY}

            <b>Matrix:</b>

            Version: ${{ matrix.version }}
            
            Ref: ${{ env.PLANNED_VERSION_COMMIT }}

            Label: ${{ matrix.runs-on.label }}

            Arch: ${{ matrix.runs-on.arch }}

            <b>Run:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>

            <b>Artifact:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}

            <b>Artifact repo:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


...
