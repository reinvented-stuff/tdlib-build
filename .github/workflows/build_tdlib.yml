---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

name: Build TDLib

on:
  push:
    branches:
      - '*'

jobs:

  notify_started:
    name: Send notification on start
    runs-on: ubuntu-latest

    steps:

      - name: Send notification on start
        uses: rest-gateway/notification-action@master
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY}
            Triggered on push to '${GITHUB_REF#refs/heads/}'
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@master
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


  build_matrix:
    name: Build Multi-platform
    outputs:
      job_status: ${{ job.status }}
      artifact_name: ${{ steps.set_artifact_name.outputs.name }}
    strategy:
      matrix:
        version:
          - ref: ${{ needs.validate_new_version.outputs.planned_version }}
          - ref: master
        runs-on:
          - os: ubuntu-22.04
            label: linux
            arch: amd64
          - os: macos-12
            label: macos
            arch: amd64
    runs-on: ${{ matrix.runs-on.os }}

    needs:
      - validate_new_version

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "tdlib"
      REF: "${{ matrix.version.ref }}"
      ARTIFACT_BASENAME: "tdlib-${{ matrix.version.ref }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}"
      ARTIFACT_TARGZ_NAME: tdlib-${{ matrix.version.ref }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}.tar.gz"

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Install dependencies
        id: install_dependencies
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/install-dependencies.sh"


      - name: Check out tdlib repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: tdlib/td
          ref: "${{ env.REF }}"
          path: td


      - name: Print out directory contents
        id: print_directory_contents
        shell: bash
        run: |
          ls -lAth .


      - name: Build TDLib
        id: build
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/build.sh"


      - name: Compress binaries
        id: compress_binaries
        shell: bash
        run: |
          mkdir -v "${{ env.ARTIFACT_BASENAME }}"
          mv -v td/tdlib "${{ env.ARTIFACT_BASENAME }}/"
          tar -zvcf "${{ env.ARTIFACT_TARGZ_NAME }}" "${{ env.ARTIFACT_BASENAME }}"


      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: "${{ env.ARTIFACT_NAME }}"
          if-no-files-found: error
          retention-days: 90


      - name: Upload artifact to JFrog Artifactory
        id: upload_to_artifactory
        shell: bash
        run: >-
          curl
          -o upload_to_artifactory_result.json
          -X PUT
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -T "${{ env.ARTIFACT_TARGZ_NAME }}"
          "${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}"


      - name: Send notification on finish
        uses: rest-gateway/notification-action@master
        with:
          message: |
            <b>Workflow:</b>   ${GITHUB_WORKFLOW}
            <b>Repository:</b> ${GITHUB_REPOSITORY}
            
            <b>Matrix:</b>
            Ref: ${{ matrix.version.ref }}
            Label: ${{ matrix.runs-on.label }}
            Arch: ${{ matrix.runs-on.arch }}
            
            <b>Artifact:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


...
