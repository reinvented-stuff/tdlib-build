---
# yamllint disable rule:line-length
# yamllint disable rule:truthy

# TODO: Get rid of relative paths

name: Build TDLib

on:
  push:
    branches:
      - 'build_*'
      - '!master'

jobs:

  notify_started:
    name: Send notification on start
    runs-on: ubuntu-latest

    steps:

      - name: Send notification on start
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/})
            <b>URL:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  validate_new_version:
    name: Validate new version
    runs-on: ubuntu-latest
    outputs:
      planned_version: ${{ steps.validate_new_version.outputs.planned_version }}
      planned_version_commit: ${{ steps.get_version_commit.outputs.version_commit }}
      version_file_exists: ${{ steps.validate_new_version.outputs.version_file_exists }}
      tag_hash: ${{ steps.validate_new_version.outputs.tag_hash }}
      can_create: ${{ steps.validate_new_version.outputs.can_create }}
      tag_exists: ${{ steps.validate_new_version.outputs.tag_exists }}
      branch_name: ${{ steps.validate_new_version.outputs.branch_name }}

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Use latest released action
        id: validate_new_version
        uses: reinvented-stuff/validate-version-action@1.2.0
        with:
          version_filename: ".version"
          github_token: "${{ secrets.GITHUB_TOKEN }}"
          fail_on_error: false


      - name: Check out tdlib repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: tdlib/td
          path: td


      - name: Retreive tdlib commit corresponding to the planned version
        id: get_version_commit
        shell: bash
        run: >-
          VERSION_COMMIT=$(
          git -C td
          log
          --pretty="format:%H"
          --grep="Update version to ${{ steps.validate_new_version.outputs.planned_version }}"
          )

          echo "version_commit=${VERSION_COMMIT}" >> "${GITHUB_OUTPUT}"


      - name: Make sure commit exists for the planned version
        id: check_commit_exists
        shell: bash
        run: >-
          if [[ -z "${{ steps.get_version_commit.outputs.version_commit }}" ]]; then

            echo "Couldn't find commit
          for planned version '${{ steps.validate_new_version.outputs.planned_version }}':
          '${{ steps.get_version_commit.outputs.version_commit }}'"

            exit 127

          fi


  prepare_runners:
    name: Spin up GitHub runners
    runs-on: ubuntu-latest
    needs:
      - validate_new_version

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.11


      - name: Get GitHub runner registration token
        id: get_ghr_token
        shell: bash
        run: >-
          TOKEN=$(
          curl
          -X POST
          -H "Accept: application/vnd.github+json"
          -H "Authorization: Bearer ${{ secrets.API_GITHUB_RUNNERS_TOKEN }}"
          "https://api.github.com/orgs/reinvented-stuff/actions/runners/registration-token"
          | jq ".token"
          )

          TOKEN_FILENAME="${PWD}/.ghr_token"

          echo "${TOKEN}" > "${TOKEN_FILENAME}"

          if [[ -z "${TOKEN}" ]]; then

            echo "Error while getting GitHub runner registration token!"

            exit 2

          else

            echo "Successfully obtained GitHub runner registration token."

            echo "token=${TOKEN}" >> "${GITHUB_OUTPUT}"

            echo "token_filename=${TOKEN_FILENAME}" >> "${GITHUB_OUTPUT}"

          fi


      - name: Render SSH private key from a secret
        id: ssh_private_key
        shell: bash
        working-directory: infra/terraform
        run: >-
          echo "${{ secrets.VULTR_RSA_PRIVATE_KEY }}" > ./id_rsa


      - name: Terraform init
        id: terraform_init
        shell: bash
        working-directory: infra/terraform
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: >-
          export TF_VAR_ansible_ghr_token=$( cat "${{ steps.get_ghr_token.outputs.token_filename }}" )

          terraform init
          -backend-config="endpoint=${{ secrets.S3_ENDPOINT }}"
          -backend-config="access_key=${{ secrets.S3_ACCESS_KEY }}"
          -backend-config="secret_key=${{ secrets.S3_SECRET_KEY }}"


      - name: Terraform plan
        id: terraform_plan
        shell: bash
        working-directory: infra/terraform
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: >-
          export TF_VAR_ansible_ghr_token=$( cat "${{ steps.get_ghr_token.outputs.token_filename }}" )

          terraform plan


      - name: Terraform apply
        id: terraform_apply
        shell: bash
        working-directory: infra/terraform
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: >-
          export TF_VAR_ansible_ghr_token=$( cat "${{ steps.get_ghr_token.outputs.token_filename }}" )

          terraform apply -auto-approve -no-color 2>&1 > terraform_apply.log


      - name: Terraform show
        id: terraform_show
        shell: bash
        working-directory: infra/terraform
        continue-on-error: true
        env:
          TF_VAR_vultr_api_key: "${{ secrets.VULTR_API_KEY }}"
          TF_VAR_github_runners_count: 1
        run: |
          terraform show -json


      - name: Parse terraform show output
        id: parse_terraform_show
        shell: bash
        working-directory: infra/terraform
        continue-on-error: true
        run: |
          cat <<EOF > outputs.json
          ${{ steps.terraform_show.outputs.stdout }}
          EOF

          cat <<EOF >> "${GITHUB_OUTPUT}"
          instances<<EOF2
          $( cat outputs.json | jq -r '.values.outputs."instance-details".value[][] | .name + "\n" + .ipv4 + "\n" + .ipv6 + "\n"' )
          EOF2
          EOF


      - name: Send notification with terraform outputs
        uses: rest-gateway/notification-action@1.0.9
        if: always()
        with:
          message: |
            <b>Workflow:</b> <code>${GITHUB_WORKFLOW}</code>
            <b>Repository:</b> ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/})
            <b>URL:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>

            <b>Instances:</b>
            ${{ steps.parse_terraform_show.outputs.instances }}

            <b>Outcome:</b>
            terraform init: ${{ steps.terraform_init.outcome }}
            terraform plan: ${{ steps.terraform_plan.outcome }}
            terraform apply: ${{ steps.terraform_apply.outcome }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Upload terraform apply log
        uses: actions/upload-artifact@v3.1.0
        id: upload_terraform_apply_log
        if: always()
        with:
          name: "terraform_apply.log"
          path: "infra/terraform/terraform_apply.log"
          if-no-files-found: error
          retention-days: 90


      - name: Upload terraform show result
        uses: actions/upload-artifact@v3.1.0
        id: upload_terraform_show_result
        if: always()
        with:
          name: "outputs.json"
          path: "infra/terraform/outputs.json"
          if-no-files-found: error
          retention-days: 90


  build_matrix:
    name: Build Multi-platform

    outputs:
      job_status: ${{ job.status }}

    strategy:
      matrix:
        version:
          - ${{ needs.validate_new_version.outputs.planned_version }}
        runs-on:

          - os: redhat-8
            label: linux-redhat-8
            arch: amd64

          - os: redhat-7
            label: linux-redhat-7
            arch: amd64

          - os: ubuntu-22.04
            label: linux-ubuntu-22.04
            arch: amd64

          - os: macos-12
            label: macos12
            arch: amd64

          - os: macos-10.15
            label: macos10.15
            arch: amd64

    runs-on: ${{ matrix.runs-on.os }}

    if: 1 == 2

    needs:
      - validate_new_version
      - prepare_runners

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      PLANNED_VERSION_COMMIT: ${{ needs.validate_new_version.outputs.planned_version_commit }}
      TAG_HASH: ${{ needs.validate_new_version.outputs.tag_hash }}
      CAN_CREATE_RELEASE: ${{ needs.validate_new_version.outputs.can_create }}
      TAG_EXISTS: ${{ needs.validate_new_version.outputs.tag_exists }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "tdlib"
      ARTIFACT_BASENAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}"
      ARTIFACT_TARGZ_NAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}.tar.gz"

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Install dependencies
        id: install_dependencies
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/install-dependencies.sh"


      - name: Check out tdlib repo
        id: checkout_tdlib_repo
        shell: bash
        run: |
          mkdir -pv td
          git clone https://github.com/tdlib/td.git td


      - name: Print out directory contents
        id: print_directory_contents
        shell: bash
        run: |
          ls -lAth .


      - name: Build TDLib
        id: build
        shell: bash
        run: |
          bash "sbin/${{ matrix.runs-on.os }}/build.sh"


      - name: Compress binaries
        id: compress_binaries
        shell: bash
        run: |
          mkdir -v "${{ env.ARTIFACT_BASENAME }}"
          mv -v td/tdlib "${{ env.ARTIFACT_BASENAME }}/"
          tar -zvcf "${{ env.ARTIFACT_TARGZ_NAME }}" "${{ env.ARTIFACT_BASENAME }}"


      - name: Upload a Build Artifact
        id: upload_build_artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: "${{ env.ARTIFACT_TARGZ_NAME }}"
          path: "${{ env.ARTIFACT_TARGZ_NAME }}"
          if-no-files-found: error
          retention-days: 90


      - name: Upload artifact to JFrog Artifactory
        id: upload_to_artifactory
        shell: bash
        run: >-
          curl
          -o upload_to_artifactory_result.json
          -X PUT
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -T "${{ env.ARTIFACT_TARGZ_NAME }}"
          "${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}"


      - name: List artifacts from JFrog Artifactory
        id: list_artifacts
        shell: bash
        run: >-
          curl
          -o list_artifacts_result.json
          -X GET
          -H "Authorization: Bearer ${{ secrets.ARTFACTORY_RW_TOKEN }}"
          -H "Content-Type: text/plain"
          "${{ secrets.ARTIFACTORY_BASEURL }}/api/search/artifact?repos=${{ env.APP_NAME }}&name=${{ matrix.version }}"

          jq -r '.results[].uri' < list_artifacts_result.json


      - name: Send notification on build completion
        uses: rest-gateway/notification-action@1.0.9
        if: always()
        with:
          message: |
            <b>Workflow:</b>   ${GITHUB_WORKFLOW}
            <b>Repository:</b> ${GITHUB_REPOSITORY}

            <b>Matrix:</b>
            Version: ${{ matrix.version }}
            Ref: ${{ env.PLANNED_VERSION_COMMIT }}
            Label: ${{ matrix.runs-on.label }}
            Arch: ${{ matrix.runs-on.arch }}

            <b>Outcome:</b>
            install_dependencies: ${{ steps.install_dependencies.outcome }}
            checkout_tdlib_repo: ${{ steps.checkout_tdlib_repo.outcome }}
            print_directory_contents: ${{ steps.print_directory_contents.outcome }}
            build: ${{ steps.build.outcome }}
            compress_binaries: ${{ steps.compress_binaries.outcome }}
            upload_build_artifact: ${{ steps.upload_build_artifact.outcome }}
            upload_to_artifactory: ${{ steps.upload_to_artifactory.outcome }}
            list_artifacts: ${{ steps.list_artifacts.outcome }}

            <b>Run:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
            <b>Artifact:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}
            <b>Artifact repo:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  build_matrix_docker:
    name: Build Multi-platform Docker

    outputs:
      job_status: ${{ job.status }}

    strategy:
      matrix:
        version:
          - ${{ needs.validate_new_version.outputs.planned_version }}
        runs-on:

          - os: redhat-8
            label: linux-redhat-8
            arch: amd64
            docker: alpine-3.18

    runs-on: ${{ matrix.runs-on.os }}

    needs:
      - validate_new_version
      - prepare_runners

    env:
      PLANNED_VERSION: ${{ needs.validate_new_version.outputs.planned_version }}
      BRANCH_NAME: ${{ needs.validate_new_version.outputs.branch_name }}
      APP_NAME: "tdlib"
      ARTIFACT_BASENAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}"
      ARTIFACT_TARGZ_NAME: "tdlib-${{ matrix.version }}-${{ matrix.runs-on.label }}-${{ matrix.runs-on.arch }}.tar.gz"

    steps:

      - name: Check out this repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0


      - name: Install dependencies
        id: install_dependencies
        shell: bash
        run: |
          DEPENDENCIES_INSTALL_SCRIPT="sbin/${{ matrix.runs-on.os }}/install-dependencies-docker.sh"

          if [[ -e "${DEPENDENCIES_INSTALL_SCRIPT}" ]]
            bash "${DEPENDENCIES_INSTALL_SCRIPT}"
          else
            echo "No dependencies install script found: '${DEPENDENCIES_INSTALL_SCRIPT}'"
          fi


      - name: Build Docker image (ghcr)
        id: build_docker_image_ghcr
        uses: reinvented-stuff/build-docker-image-action@2.1.0
        with:
          registry_address: "ghcr.io"
          registry_username: "${{ github.actor }}"
          registry_token: "${{ secrets.GITHUB_TOKEN }}"
          name: "${{ github.repository }}/${{ env.APP_NAME }}"
          planned_version: "${{ env.PLANNED_VERSION }}"
          working_directory: "docker/${{ matrix.runs-on.docker }}"
          build_args: |-
            APP_VERSION=${{ env.PLANNED_VERSION }}


      - name: Build Docker image (docker hub)
        id: build_docker_image_hub
        uses: reinvented-stuff/build-docker-image-action@2.1.0
        if: 1 == 2
        with:
          registry_address: "docker.io"
          registry_username: "${{ secrets.DOCKER_HUB_USERNAME }}"
          registry_token: "${{ secrets.DOCKER_HUB_TOKEN }}"
          name: "${{ secrets.DOCKER_HUB_IMAGE_NAME }}"
          planned_version: "${{ env.PLANNED_VERSION }}"
          working_directory: "docker/${{ matrix.runs-on.docker }}"
          build_args: |-
            APP_VERSION=${{ env.PLANNED_VERSION }}


      - name: Send out notification about docker image build
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            Docker image: <b>${{ env.APP_NAME }}</b> v${{ env.PLANNED_VERSION }} (${{ env.BRANCH_NAME }})

            <code>${{ steps.build_docker_image_hub.outputs.image_full_name }}</code>
            <code>${{ steps.build_docker_image_ghcr.outputs.image_full_name }}</code>
          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


      - name: Send notification on build completion
        uses: rest-gateway/notification-action@1.0.9
        if: always()
        with:
          message: |
            <b>Workflow:</b>   ${GITHUB_WORKFLOW}
            <b>Repository:</b> ${GITHUB_REPOSITORY}

            <b>Matrix:</b>
            Version: ${{ matrix.version }}
            Ref: ${{ env.PLANNED_VERSION_COMMIT }}
            Label: ${{ matrix.runs-on.label }}
            Arch: ${{ matrix.runs-on.arch }}

            <b>Outcome:</b>
            install_dependencies: ${{ steps.install_dependencies.outcome }}
            checkout_tdlib_repo: ${{ steps.checkout_tdlib_repo.outcome }}
            print_directory_contents: ${{ steps.print_directory_contents.outcome }}
            build: ${{ steps.build.outcome }}
            compress_binaries: ${{ steps.compress_binaries.outcome }}
            upload_build_artifact: ${{ steps.upload_build_artifact.outcome }}
            upload_to_artifactory: ${{ steps.upload_to_artifactory.outcome }}
            list_artifacts: ${{ steps.list_artifacts.outcome }}

            <b>Run:</b> <code>https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}</code>
            <b>Artifact:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}/${{ env.ARTIFACT_TARGZ_NAME }}
            <b>Artifact repo:</b> ${{ secrets.ARTIFACTORY_REPO_URL }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


  after_build:
    name: After build process
    runs-on: ubuntu-latest

    if: always()

    needs:
      - build_matrix

    steps:

      - name: Send notification on all builds finish
        uses: rest-gateway/notification-action@1.0.9
        with:
          message: |
            <b>Workflow:</b>   ${GITHUB_WORKFLOW}
            <b>Repository:</b> ${GITHUB_REPOSITORY}

            <b>Matrix results:</b>
            Status: ${{ needs.build_matrix.outputs.job_status }}

          recipient: "${{ secrets.NOTIFICATIONS_DEFAULT_RECIPIENT }}"
          rest_gateway_url: "${{ secrets.REST_GATEWAY_API_URL }}"
          rest_gateway_token: "${{ secrets.REST_GATEWAY_TOKEN }}"
          rest_gateway_bot_name: "${{ secrets.REST_GATEWAY_BOT_NAME }}"


...
